CREATE DATABASE PRACTICE;

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    country VARCHAR(50)
);

INSERT INTO Customers VALUES
(1, 'John', 'Doe', 'john.doe@example.com', 'United States'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', 'United Kingdom'),
(3, 'Michael', 'Brown', 'michael.brown@example.com', 'Canada');




CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Insert Data into Orders
INSERT INTO Orders VALUES
(101, 1, '2023-01-10', 250.50),
(102, 2, '2023-01-15', 320.75),
(103, 1, '2023-02-01', 150.00),
(104, 3, '2023-02-10', 400.00);


-- Create Products Table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10, 2)
);

INSERT INTO Products VALUES
(201, 'Laptop', 'Electronics', 800.00),
(202, 'Smartphone', 'Electronics', 600.00),
(203, 'Desk Chair', 'Furniture', 120.00),
(204, 'Table Lamp', 'Furniture', 50.00);


CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

INSERT INTO OrderDetails VALUES
(1001, 101, 201, 1),
(1002, 101, 203, 2),
(1003, 102, 202, 1),
(1004, 103, 204, 3),
(1005, 104, 201, 1),
(1006, 104, 204, 4);


Question 1: Retrieve all customers from the United States.

SELECT * 
FROM Customers 
WHERE country = 'United States';

Question 2: List all orders placed after January 1, 2023.

SELECT * 
FROM Orders 
WHERE order_date > '2023-01-01';


Question 3: Calculate the total amount spent by each customer.

SELECT c.customer_id, c.first_name, c.last_name, SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC;


Question 4: Get the total quantity of each product sold

SELECT p.product_name, SUM(od.quantity) AS total_quantity_sold
FROM Products p
JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.product_name
ORDER BY total_quantity_sold DESC;

Question 5: Find customers who havenâ€™t placed any orders.

SELECT * 
FROM Customers 
WHERE customer_id NOT IN (SELECT customer_id FROM Orders);

Question 6: Retrieve the revenue generated by each product category.

SELECT p.category, SUM(p.price * od.quantity) AS revenue
FROM Products p
JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.category
ORDER BY revenue DESC;

Question 7: Rank customers by their total spending.

SELECT c.customer_id, c.first_name, c.last_name, SUM(o.total_amount) AS total_spent,
RANK() OVER (ORDER BY SUM(o.total_amount) DESC) AS spending_rank
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;




select * FROM CUSTOMERS;
select * FROM Ordersdetails;
select * FROM Orders;
select * FROM products;

Question 8: Find the second highest total amount among all orders.

SELECT MAX(total_amount) AS second_highest_amount
FROM Orders
WHERE total_amount < (SELECT MAX(total_amount) FROM Orders);


Question 9: Retrieve customers who have placed more than one order.

SELECT c.customer_id, c.first_name, c.last_name, COUNT(o.order_id) AS order_count
FROM Customers c
JOIN Orders o 
ON c.customer_id = o.customer_id
GROUP BY c.customer_id 
HAVING COUNT(o.order_id) > 1;

Question 10: Identify the product that generated the highest revenue.

SELECT p.product_name, SUM(od.quantity * p.price) AS revenue
FROM Products p
JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.product_name
ORDER BY revenue DESC
LIMIT 1;

Question 11: List all orders along with the total quantity of items ordered in each.

SELECT o.order_id, o.order_date, SUM(od.quantity) AS total_items
FROM Orders o
JOIN OrderDetails od ON o.order_id = od.order_id
GROUP BY o.order_id, o.order_date
ORDER BY total_items DESC;



CREATE TABLE table1 (
    EmpID INT PRIMARY KEY,
    Name VARCHAR(50),
    Department VARCHAR(20),
    Salary INT,
    JoinDate DATE,
    Age INT,
    City VARCHAR(30)
);

INSERT INTO table1 (EmpID, Name, Department, Salary, JoinDate, Age, City) VALUES
(101, 'Rahul Sharma', 'IT', 70000, '2020-06-15', 30, 'Mumbai'),
(102, 'Priya Verma', 'HR', 50000, '2019-08-21', 28, 'Delhi'),
(103, 'Amit Patel', 'Finance', 65000, '2018-12-10', 35, 'Bangalore'),
(104, 'Sneha Joshi', 'IT', 72000, '2021-01-05', 27, 'Pune'),
(105, 'Arjun Mehta', 'Sales', 48000, '2022-04-18', 29, 'Chennai'),
(106, 'Neha Singh', 'HR', 51000, '2020-11-30', 26, 'Mumbai'),
(107, 'Rohan Das', 'IT', 75000, '2017-09-25', 32, 'Delhi'),
(108, 'Karan Kapoor', 'Finance', 68000, '2019-03-14', 31, 'Bangalore');

SELECT * FROM table1;

SELECT empid, name, Department FROM table1
WHERE department = 'IT';

SELECT empid, name, Department, joindate, age, salary, city   FROM table1
WHERE salary > 60000;

DISTINCT COUNT department from table1;

SELECT Department, DISTINCT COUNT(*) AS EmployeeCount 
FROM table1 
GROUP BY Department;

SELECT Department, COUNT AS EmployeeCount
FROM table1
GROUP BY Department;

SELECT Department, COUNT(DISTINCT EmpID) AS UniqueEmployeeCount 
FROM table1 
GROUP BY Department;

SELECT name, department, MAX(Salary) AS HighestSalary FROM table1;

SELECT Name, Department, Salary 
FROM table1 
WHERE Salary = (SELECT MAX(Salary) FROM table1);

SELECT Name, Department, Salary 
FROM table1 
WHERE Salary = (SELECT MIN(Salary) FROM table1);

















